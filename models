# -*- coding: utf-8 -*-

from odoo import models, fields, api
import qrcode
import base64
from io import BytesIO


class city_shopCustomer(models.Model):
    _name = 'city_shop.customer'
    _inherit = 'mail.thread'

    name = fields.Char(string="Name",required=True, track_visibility=True)
    dob = fields.Date(string="D.O.B")
    gender = fields.Selection([('male', 'Male'),('female', 'Female')])
    mobile = fields.Char(string="Mobile",required=True)
    email = fields.Char(string="Email",required=True)
    address = fields.Text(string="Address")
    shipping_type = fields.Selection([            
            ('free_shipping', 'Free Shipping'),
            ('chargeable', 'Shipping Charge')])
    active = fields.Boolean(default=True)
    state = fields.Selection([            
            ('started', 'Started'),
            ('progress', 'In progress'),
            ('finished', 'Done'),
            ],default='started')
    

    @api.multi
    def started_progressbar(self):
        self.ensure_one()
        self.write({
            'state': 'started'
        })

    @api.multi
    def progress_progressbar(self):
        self.ensure_one()
        self.write({
            'state': 'progress'
    })

    @api.multi
    def done_progressbar(self):
        self.ensure_one()
        self.write({
            'state': 'finished',
    })

class city_shopEmployee(models.Model):
    _name = 'city_shop.employee'

    display_name = fields.Char(string='Name')
    email = fields.Char(string='Email', required=True)
    mobile = fields.Char(string='Mobile', required=True)
    product_image = fields.Binary(attachment=True, required=True)
   
    
class my_employee(models.Model):
    _inherit='product.template'    

    #pin_code = fields.Integer(string="Pincode", size=6)
    shipping_types = fields.Selection([('free_shipping', 'Free Shipping'),('chargeable', 'Shipping Charge')])
    product_weight = fields.Float(string="Product Weight", help="7 kg")
    shipping_charge = fields.Float(string="Shipping Charge",compute='_get_sum')
    qr_code = fields.Binary('QRcode', compute="_generate_qr")

    @api.one
    @api.depends('product_weight')
    def _get_sum(self):
        for rec in self:
            if rec.shipping_types=='chargeable':
                rec.shipping_charge = rec.product_weight*rec.product_weight
            else:
                rec.shipping_charge == 00

    def _generate_qr(self):
       for rec in self:
           if qrcode and base64:
               qr = qrcode.QRCode(version=1,error_correction=qrcode.constants.ERROR_CORRECT_L,box_size=3,border=4)
               qr.add_data("Product Name : " + rec.name + "\n")
               qr.add_data("Product Price : " + str(rec.list_price) + "\n")
               qr.add_data("GST : " + str(rec.list_price*18/100) + "\n")
               qr.add_data("Total Amount : " + str(rec.list_price + rec.list_price*18/100) + "\n")
               qr.add_data("Product Type : " + rec.type + "\n") 
               qr.add_data("Product Category : " + rec.categ_id.name + "\n")
               #qr.add_data("Product Tax : " + rec.tax_id + "\n")
               
               qr.make(fit=True)
               img = qr.make_image()
               temp = BytesIO()
               img.save(temp, format="PNG")
               qr_image = base64.b64encode(temp.getvalue())
               rec.update({'qr_code':qr_image})
